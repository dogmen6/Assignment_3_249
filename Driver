// ------------------------------------------------------------------------ 
// Assignment 3
// ------------------------------------------------------------------------

//import the packages needed
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

// Exception class to print error message in case of a missing attribute

/**
 * This is an exception class that is specific to all errors concerning any missing attribute
 * in a CSV file that the user would like to open.
 * */

class CSVAttributeMissing extends Exception {

	//default constructor
	/**
	 * This is a default constructor for the exception class CSVAttributeMissing
	 * */
	public CSVAttributeMissing() {
		super("Error: Input row cannot be parsed due to missing information");
	}

	//constructor to let the user print a specific message
	/**
	 * This is a constructor to print a specific message
	 * @param s takes a string parameter
	 * */
	public CSVAttributeMissing(String s) {
		super(s);
	}

	//getter
	/**
	 * This is a getter method to be able to get the message
	 * */
	public String getMessage() {
		return super.getMessage();
	}
}

//Exception class to print error message in case of a missing data

/**
 * This is an exception class that is specific to all errors concerning any missing data
 * in a CSV file that the user would like to open.
 * */

class CSVDataMissing extends Exception {
	
	//default constructor
	
	/**
	 * This is a default constructor for the exception class CSVDataMissing
	 * */
	public CSVDataMissing() {
		super("Error: Input row cannot be parsed due to missing information");
	}

	//constructor to let the user print a specific message
	/**
	 * This is a constructor to print a specific message
	 * @param s takes a string parameter
	 * */
	public CSVDataMissing(String s) {
		super(s);
	}

	/**
	 * This is a getter method to be able to get the message
	 * */
	public String getMessage() {
		return super.getMessage();
	}



/**
 * Description: 
 * This program is able to convert/transfer the contents of Excel tables contained in an excel
 * file into HTML tables. When the program is running, the user is asked to enter the file name 
 * that contains data and then the program prompts the user to enter the output file name. If the 
 * file does not exists, the program will create it, and if it exists, the new data will be appended 
 * to the file in question. In addition, this program can handle 2 exceptions; CSVAttributeMissing 
 * and CSVDataMissing.
 * 
 * */
public class Driver {
	
	//attributes
	
	/**
	 * filename_in is the input name of the file
	 * */
	static String filename_in;
	
	/**
	 * array of string containing attributes
	 * */
	static String[] arr_attr;
	
	/**
	 * title takes the title of each files
	 * */
	static String title = "";
	
	/**
	 * attribute for the attributes of the CSV files
	 * */
	static String attribute = "";
	
	/**
	 * data takes the data when reading the file
	 * */
	static String data = "";
	
	/**
	 * note is the message at the end of the table
	 * */
	static String note = "";
	
	/**
	 * count is the count line
	 * */
	public static int count = 1;
	
	/**
	 * ConvertCSVtoHTML method in order to read a file and write it in a new file.
	 * @param scan scan is the name of the Scanner
	 * @param print print is a PrintWriter variable
	 * @param error this is a PrintWriter designated to print errors
	 * */
	public static void ConvertCSVtoHTML(Scanner scan, PrintWriter print, PrintWriter error) {
		
		print.println("<html>\r\n"
				+ "<style>\r\n"
				+ "table {font-family: arial, sans-serif;border-collapse: collapse;}\r\n"
				+ "td, th {border: 1px solid #000000;text-align: left;padding: 8px;}\r\n"
				+ "tr:nth-child(even) {background-color: #dddddd;}\r\n"
				+ "span{font-size: small}\r\n"
				+ "</style>\r\n"
				+ "<body> \n");
		
		//while loop to print each line of the file
		while (scan.hasNextLine()) {
			
			//if statement to print the title
			if (count == 1) {
				title = scan.nextLine();
				title = title.substring(3);
				title = title.substring(0, title.length()-3);
				print.println("<table>");
				print.println("<caption>" + title + "</caption>");
				count++;

			}
			
			//if statement to print the attribute line
			if (count == 2) {
				
				print.println("<tr>");
				
				attribute = scan.nextLine();
				arr_attr = attribute.split(",");

				//for loop to print all the attributes of the line
				for (int i = 0; i < arr_attr.length; i++) {
					try {
						if (arr_attr[i] == " " || arr_attr[i] == "") {
							throw new CSVAttributeMissing();
						}
				
					} catch (CSVAttributeMissing e) {
						
						System.out.println("ERROR: In file " + filename_in + ". Missing attribute. File is not converted to HTML");
						error.println("ERROR: In file " + filename_in + ". Missing attribute. File is not converted to HTML");
						System.out.println(e);
						error.close();
						System.exit(0);
						
					}
					print.println("<th>" + arr_attr[i] + " " + "</th>");
				}
				print.println("</tr>");
				count++;
				
				print.println("</tr>");

			}

			//print all data lines
			else {
				
				print.println("<tr>");
				
				data = scan.nextLine();
				String[] arr_data = data.split(",");

				for (int i = 0; i < arr_data.length; i++) {
					try {
						if (arr_data[i] == " " || arr_data[i] == "") {
							throw new CSVDataMissing();
						}

					} catch (CSVDataMissing e) {
						
						System.out.println("WARNNING: In file " + filename_in + " line " + count + " is not converted to HTML: missing data: " + arr_attr[i] + ".");
						error.println("WARNNING: In file " + filename_in + " line " + count + " is not converted to HTML: missing data: " + arr_attr[i] + ".");
						System.out.println(e);
						print.println("<td>");
						error.close();
						continue;
		
					}
					
					if(arr_data[i].contains("Note:")) {
						note=arr_data[i];
					}
					
					else{
						print.println("<td>" + arr_data[i] + "</td>");
					}
				}
				System.out.println();
				count++;
			}
		}
		
		print.println("</tr>");
		print.println("</table>");
		
		print.println("<span>" + note + "</span>");
		print.println("</body>");
		print.println("</html>");

		//close the scanner and printwriter
		scan.close();
		print.close();
	}

	/**
	 * main method to run the program
	 * @param args command-line of the arguments as an array
	 * */
	public static void main(String[] args) {
		
		//initialize the Scanner
		Scanner kb = new Scanner(System.in);

		//initialize the scanner and printwriters
		Scanner sc = null;
		PrintWriter pw = null;
		PrintWriter pwerror = null;
		BufferedReader buff = null;

		//prompt the user for the file input and output names
		System.out.println("Please enter your filename input : ");
		filename_in = kb.nextLine();
		System.out.println("Please enter your filename output : ");
		String filename_out = kb.nextLine();
		System.out.println();
		
		//open the Scanner and PrintWriters
		try {
			sc = new Scanner(new FileInputStream(filename_in));
			pw = new PrintWriter(new FileOutputStream(filename_out, true));
			pwerror = new PrintWriter(new FileOutputStream("Exception.log", true));
		} 
		
		catch (FileNotFoundException e) {
			System.out.println("Could not open input file " + filename_in + " for reading.\r\n"
					+ "Please check that the file exists and is readable. This program will terminate after closing any opened files.");
			
			
			
			System.exit(0);
		}
		
		System.out.println("Please enter the file to display: ");
		String display1 = kb.nextLine();
		
		ConvertCSVtoHTML(sc, pw, pwerror);
		
		
		
		try {
			
			buff = new BufferedReader (new FileReader(display1));
			
			String reading = buff.readLine();
			
			while(reading != null) {
				System.out.println(reading);
				reading = buff.readLine();
			}
			
			buff.close();
			
		}
		
		catch (FileNotFoundException e){
		
			System.out.println("The entered file is invalid. You will have one last try!");
			System.out.print("Please enter the name of the file: ");
			
			String display2 = kb.nextLine();
			
			
			try {
				buff = new BufferedReader (new FileReader(display2));
				
				String reading = buff.readLine();
				
				while(reading != null) {
					System.out.println(reading);
					reading = buff.readLine();
				}
				
				buff.close();
				
			}
			
			catch (FileNotFoundException e2){
			
				System.out.println("This was your second attempt and the name of the file entered could not be found."
						+ " The program will now terminate. ");
				System.exit(0);
			
			}
			
			catch (IOException e2) {
				
				System.out.println("There is an error in the file. The program will now terminate.");
				System.exit(0);
			}
			
		
		}
		
		catch (IOException e2) {
			
			System.out.println("There is an error in the file. The program will now terminate.");
			System.exit(0);
		}
	
		
		//close the scanner
		kb.close();
	}

}}
